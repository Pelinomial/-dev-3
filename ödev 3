{"nbformat": 4, "nbformat_minor": 5, "metadata": {}, "cells": [{"id": "c8d7b03d", "cell_type": "markdown", "source": "\n# Yaz Kampı - Veri Bilimi Ödev 3\n\nBu notebook içerisinde **Hafta 3 ödev soruları** çözülmüştür.\n", "metadata": {}}, {"id": "64679aa6", "cell_type": "code", "metadata": {}, "execution_count": null, "source": "\n# Soru 1 – Liste Metotları\n\nnotlar = [85, 92, 76, 92, 100, 76, 85, 92]\n\n# Benzersiz liste\nbenzersiz_notlar = list(set(notlar))\n\n# En yüksek ve en düşük\nen_yuksek = max(notlar)\nen_dusuk = min(notlar)\n\n# Küçükten büyüğe sıralama\nsirali = sorted(notlar)\n\nprint(\"Benzersiz notlar:\", benzersiz_notlar)\nprint(\"En yüksek not:\", en_yuksek)\nprint(\"En düşük not:\", en_dusuk)\nprint(\"Sıralı notlar:\", sirali)\n", "outputs": []}, {"id": "338e7dff", "cell_type": "code", "metadata": {}, "execution_count": null, "source": "\n# Soru 2 – Armstrong Sayısı Kontrolü\n\ndef armstrong_mu(sayi):\n    toplam = sum(int(h)**3 for h in str(sayi))\n    return toplam == sayi\n\nprint(153, \"Armstrong mu?\", armstrong_mu(153))\nprint(370, \"Armstrong mu?\", armstrong_mu(370))\nprint(100, \"Armstrong mu?\", armstrong_mu(100))\n", "outputs": []}, {"id": "536ac6f4", "cell_type": "code", "metadata": {}, "execution_count": null, "source": "\n# Soru 3 – Kümeler\n\nA = {\"Python\", \"R\", \"SQL\", \"Java\"}\nB = {\"C++\", \"Python\", \"JavaScript\", \"SQL\"}\n\nortak = A & B\nsadece_A = A - B\nbirlesim = sorted(A | B)\n\nprint(\"Ortak diller:\", ortak)\nprint(\"Sadece A'da olan:\", sadece_A)\nprint(\"Birleşim:\", birlesim)\n", "outputs": []}, {"id": "d3425923", "cell_type": "code", "metadata": {}, "execution_count": null, "source": "\n# Soru 4 – Modüller\n\nimport random, statistics\n\nsayilar = [random.randint(1, 100) for _ in range(10)]\n\nortalama = statistics.mean(sayilar)\nstd_sapma = statistics.stdev(sayilar)\n\nprint(\"Sayılar:\", sayilar)\nprint(\"Ortalama:\", ortalama)\nprint(\"Standart sapma:\", std_sapma)\n", "outputs": []}, {"id": "29620a79", "cell_type": "code", "metadata": {}, "execution_count": null, "source": "\n# Soru 5 – Fonksiyonlar\n\nfrom collections import Counter\n\ndef kelime_sayaci(metin):\n    kelimeler = metin.split()\n    toplam = len(kelimeler)\n    en_uzun = max(kelimeler, key=len)\n    en_sik = Counter(kelimeler).most_common(1)[0][0]\n    return toplam, en_uzun, en_sik\n\nmetin = \"veri bilim veri python analiz veri\"\nprint(kelime_sayaci(metin))\n", "outputs": []}, {"id": "f4443d82", "cell_type": "code", "metadata": {}, "execution_count": null, "source": "\n# Soru 6 – Gömülü Fonksiyonlar\n\nsayilar = [5, 12, 7, 18, 24, 3, 16]\n\nciftler = list(filter(lambda x: x % 2 == 0, sayilar))\nkareler = list(map(lambda x: x**2, ciftler))\nsirali = sorted(kareler, reverse=True)\n\nprint(\"Çift sayılar:\", ciftler)\nprint(\"Kareleri:\", kareler)\nprint(\"Azalan sıralı kareler:\", sirali)\n", "outputs": []}, {"id": "492d948c", "cell_type": "code", "metadata": {}, "execution_count": null, "source": "\n# Soru 7 – Lambda ile sıralama\n\nkelimeler = [\"veri\", \"bilim\", \"analiz\", \"yapayzeka\", \"python\"]\nsirali = sorted(kelimeler, key=lambda x: len(x))\n\nprint(\"Uzunluğa göre sıralı:\", sirali)\n", "outputs": []}, {"id": "5d2244ad", "cell_type": "code", "metadata": {}, "execution_count": null, "source": "\n# Soru 8 – String içindeki rakamların toplamı\n\ndef rakam_toplami(metin):\n    sayilar = [int(ch) for ch in metin if ch.isdigit()]\n    return sum(sayilar)\n\nprint(rakam_toplami(\"abc12def3\"))  # 1+2+3=6\nprint(rakam_toplami(\"a5b9c4\"))     # 5+9+4=18\n", "outputs": []}, {"id": "a9565f9f", "cell_type": "code", "metadata": {}, "execution_count": null, "source": "\n# Soru 9 – Numpy 1\n\nimport numpy as np\n\narr = np.random.randint(0, 51, 10)\nprint(\"Dizi:\", arr)\nprint(\"Ortalama:\", np.mean(arr))\nprint(\"Std sapma:\", np.std(arr))\nprint(\"En büyük:\", np.max(arr))\n", "outputs": []}, {"id": "0c07a7ae", "cell_type": "code", "metadata": {}, "execution_count": null, "source": "\n# Soru 10 – Numpy 2\n\nmat = np.random.rand(5,5)\nprint(\"Matris:\\n\", mat)\n\nsutun_ort = np.mean(mat, axis=0)\nprint(\"Sütun ortalamaları:\", sutun_ort)\n\nbinary = (mat > 0.5).astype(int)\nprint(\"Binary matris:\\n\", binary)\n", "outputs": []}]}
